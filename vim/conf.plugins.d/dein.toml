# ------------------------------------------------------------------------------
#                                    初期化
# ------------------------------------------------------------------------------

# denite - キー入力による統一的インタフェース {{{
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = """
if dein#tap('denite.nvim')
  " Add custom menus
  let s:menus = {}
  let s:menus.file = {'description': 'File search (buffer, file, file_rec, file_mru'}
  let s:menus.line = {'description': 'Line search (change, grep, line, tag'}
  let s:menus.others = {'description': 'Others (command, command_history, help)'}
  let s:menus.file.command_candidates = [
        \ ['buffer', 'Denite buffer'],
        \ ['file: Files in the current directory', 'Denite file'],
        \ ['file_rec: Files, recursive list under the current directory', 'Denite file_rec'],
        \ ['file_mru: Most recently used files', 'Denite file_mru']
        \ ]
  let s:menus.line.command_candidates = [
        \ ['change', 'Denite change'],
        \ ['grep :grep', 'Denite grep'],
        \ ['line', 'Denite line'],
        \ ['tag', 'Denite tag']
        \ ]
  let s:menus.others.command_candidates = [
        \ ['command', 'Denite command'],
        \ ['command_history', 'Denite command_history'],
        \ ['help', 'Denite help']
        \ ]

  call denite#custom#var('menu', 'menus', s:menus)

  nnoremap [denite] <Nop>
  nmap <Leader>f [denite]
  nnoremap <silent> [denite]b :Denite buffer<CR>
  nnoremap <silent> [denite]c :Denite changes<CR>
  nnoremap <silent> [denite]f :Denite file<CR>
  nnoremap <silent> [denite]g :Denite grep<CR>
  nnoremap <silent> [denite]h :Denite help<CR>
  nnoremap <silent> [denite]l :Denite line<CR>
  nnoremap <silent> [denite]t :Denite tag<CR>
  nnoremap <silent> [denite]m :Denite file_mru<CR>
  nnoremap <silent> [denite]u :Denite menu<CR>

  call denite#custom#map(
        \ 'insert',
        \ '<Down>',
        \ '<denite:move_to_next_line>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'insert',
        \ '<Up>',
        \ '<denite:move_to_previous_line>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'insert',
        \ '<C-N>',
        \ '<denite:move_to_next_line>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'insert',
        \ '<C-P>',
        \ '<denite:move_to_previous_line>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'insert',
        \ '<C-G>',
        \ '<denite:assign_next_txt>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'insert',
        \ '<C-T>',
        \ '<denite:assign_previous_line>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'normal',
        \ '/',
        \ '<denite:enter_mode:insert>',
        \ 'noremap'
        \)
  call denite#custom#map(
        \ 'insert',
        \ '<Esc>',
        \ '<denite:enter_mode:normal>',
        \ 'noremap'
        \)
endif
"""
# }}}
# deoplete - 非同期自動補完{{{
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = """
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_completion_start_length = 1
"""
# }}}
# neomru - {{{
[[plugins]]
repo = 'Shougo/neomru.vim'
# }}}

# ------------------------------------------------------------------------------
#                                  全般/共通
# ------------------------------------------------------------------------------

# defx - ファイラー{{{
[[plugins]]
repo = 'cocopon/vaffle.vim'
hook_add = """
nnoremap <Leader>v :e .<CR>
"""
# }}}
# vim-alignta - 桁揃え{{{
[[plugins]]
repo = 'h1mesuke/vim-alignta'
hook_add = """
vnoremap gf= :Align=<CR>
vnoremap gf: :Align:<CR>
vnoremap gf, :Align,<CR>
vnoremap gf. :Align.<CR>
vnoremap gf() :Align ( )<CR>
"""
# }}}
# vim-surround - 括り文字操作{{{
[[plugins]]
repo = 'tpope/vim-surround'
# }}}
# lexima - 括弧補完{{{
[[plugins]]
repo = 'cohama/lexima.vim'
# }}}
# caw - コメントアウト{{{
[[plugins]]
repo = 'tyru/caw.vim'
hook_add = """
nmap <Leader>c <Plug>(caw:I:toggle)
vmap <Leader>c <Plug>(caw:I:toggle)
"""
# }}}
# foldCC - 折りたたみ時のタイトル表示変更{{{
[[plugins]]
repo = 'LeafCage/foldCC'
# }}}
# vim-highlightedyank - ヤンクハイライト{{{
[[plugins]]
repo = 'machakann/vim-highlightedyank'
# }}}
# ultisnips - スニペット{{{
[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = """
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

let g:UltiSnipsSnippetDirectories=["conf.plugins.d/ultisnips.snippets.d"]
"""
# }}}
# vimi-snippets - スニペット{{{
[[plugins]]
repo = 'honza/vim-snippets'
# }}}
# *LSP - Language Server Protocol {{{
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = """
" Python
if executable('pyls')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'pyls',
    \ 'cmd': {server_info->['pyls']},
    \ 'whitelist': ['python'],
    \ })
endif

if executable('gopls')
  augroup LspGo
    au!
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'go-lang',
        \ 'cmd': {server_info->['bingo', '-mode', 'stdio']},
        \ 'whitelist': ['go'],
        \ })
    autocmd FileType go setlocal omnifunc=lsp#complete
  augroup END
endif

nnoremap <silent> <Leader>ld :LspDefinition<CR>
nnoremap <silent> <Leader>lp :LspHover<CR>
nnoremap <silent> <Leader>lr :LspReferences<CR>
nnoremap <silent> <Leader>li :LspImplementation<CR>
nnoremap <silent> <Leader>ls :split \| :LspDefinition <CR>
nnoremap <silent> <Leader>lv :vsplit \| :LspDefinition <CR>
"""

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
hook_add = """
let g:lsp_async_completion = 1
"""

[[plugins]]
repo = 'natebosch/vim-lsc'
# }}}
# vim-gitgutter - Gitファイル差分を左端に表示{{{
[[plugins]]
repo = 'airblade/vim-gitgutter'
# }}}

# ------------------------------------------------------------------------------
#                                    言語別
# ------------------------------------------------------------------------------

# (Go) vim-go - IDE的な機能{{{
[[plugins]]
repo = 'fatih/vim-go'
hook_add = """
let g:go_bin_path = expand($GOPATH . "/bin")

" GOプログラムの入力補完
exe "set rtp+=".globpath($GOPATH, "src/github.com/nsf/gocode/vim")

" インポート補完
let g:go_fmt_command = "goimports"

" Ctrl-J無効化
let g:go_def_mapping_enabled = 0

" GoTest時の画面分割
let g:go_term_mode = 'split'
"""
# }}}
# (Nim) nim.vim - シンタックスハイライト{{{
[[plugins]]
repo = 'zah/nim.vim'
# }}}
# (HTML) emmet-vim - スニペット{{{
[[plugins]]
repo = 'mattn/emmet-vim'
# }}}
# (JavaScript) vim-javascript - シンタックスハイライトとインデント{{{
[[plugins]]
repo = 'pangloss/vim-javascript'
# }}}
# (JavaScript) jscomplete-vim - メソッド補完{{{
[[plugins]]
repo = 'mattn/jscomplete-vim'
hook_add = """
" DOMとMozilla関連とES6のメソッドを補完
let g:jscomplete_use = ['dom', 'moz', 'es6th']
"""
# }}}
# (CSS) vim-css3-syntax - CSS3シンタックスハイライト{{{
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
# }}}
# (PowerShell) vim-ps1 - シンタックスハイライト{{{
[[plugins]]
repo = 'PProvost/vim-ps1'
# }}}
# (Node.js) vim-nodejs-complete - 補完{{{
[[plugins]]
repo = 'myhere/vim-nodejs-complete'
hook_add = """
autocmd FileType javascript setlocal omnifunc=nodejscomplete#CompleteJS
if !exists('g:neocomplcache_omni_functions')
  let g:neocomplcache_omni_functions = {}
endif
let g:neocomplcache_omni_functions.javascript = 'nodejscomplete#CompleteJS'

let g:node_usejscomplete = 1

let g:nodejs_complete_config = {
\  'js_compl_fn': 'jscomplete#CompleteJS',
\  'max_node_compl_len': 15
\}
"""
# }}}
# (Markdown) VOoM - アウトライナ{{{
[[plugins]]
repo = 'vim-scripts/VOoM'
# }}}
# (Markdown) vim-markdown - シンタックスハイライト{{{
[[plugins]]
repo = 'rcmdnk/vim-markdown'
hook_add = """
" ハイライト設定
hi link htmlItalic LineNr
hi link htmlBold WarningMsg
hi link htmlBoldItalic ErrorMsg

let g:vim_markdown_folding_disabled=1

let g:vim_markdown_liquid=1
let g:vim_markdown_math=0
let g:vim_markdown_frontmatter=1
let g:vim_markdown_toml_frontmatter=1
let g:vim_markdown_json_frontmatter=0

" 折り畳み無効化
set nofoldenable
"""
# }}}
# (Markdown) vim-table-mode - テーブル整形{{{
[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
hook_add = """
let g:table_mode_corner='|'
"""
# }}}
# (Markdown) vim-markdown-toc - Markdown形式の目次の自動生成{{{
[[plugins]]
repo = 'mzlogin/vim-markdown-toc'
# }}}
# (TOML) vim-toml - シンタックスハイライト{{{
[[plugins]]
repo = 'cespare/vim-toml'
# }}}
# (CSV) rainbow_csv - 虹色ハイライト{{{
[[plugins]]
repo = 'mechatroner/rainbow_csv'
# }}}
# (SQL) Align - Formatter{{{
[[plugins]]
repo = 'vim-scripts/Align'
# }}}
# (SQL) SQLUtilities{{{
[[plugins]]
repo = 'vim-scripts/SQLUtilities'
# }}}
# (PlantUML) plantuml-syntax - シンタックスハイライト{{{
[[plugins]]
repo = 'aklt/plantuml-syntax'
# }}}
